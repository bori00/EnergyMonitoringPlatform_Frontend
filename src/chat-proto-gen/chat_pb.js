// source: chat.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.ro.tuc.chat.proto_gen.ChatMessage', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.ChatUpdate', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.ChatUpdate.UpdateCase', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.ChatUpdateRequest', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.Empty', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.MessageReadingStatus', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.MessageTypingStatus', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.OpenSessionRequest', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.SendMessageStatus', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.SendMessageStatus.ResultCase', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.SessionClosedUpdate', null, global);
goog.exportSymbol('proto.ro.tuc.chat.proto_gen.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.ChatMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.ChatMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.ChatMessage.displayName = 'proto.ro.tuc.chat.proto_gen.ChatMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.ChatUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.displayName = 'proto.ro.tuc.chat.proto_gen.ChatUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.MessageReadingStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.MessageReadingStatus.displayName = 'proto.ro.tuc.chat.proto_gen.MessageReadingStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.MessageTypingStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.MessageTypingStatus.displayName = 'proto.ro.tuc.chat.proto_gen.MessageTypingStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.SessionClosedUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.displayName = 'proto.ro.tuc.chat.proto_gen.SessionClosedUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ro.tuc.chat.proto_gen.ChatUpdate.oneofGroups_);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.ChatUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.ChatUpdate.displayName = 'proto.ro.tuc.chat.proto_gen.ChatUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.OpenSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.OpenSessionRequest.displayName = 'proto.ro.tuc.chat.proto_gen.OpenSessionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.displayName = 'proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.Status.displayName = 'proto.ro.tuc.chat.proto_gen.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ro.tuc.chat.proto_gen.SendMessageStatus.oneofGroups_);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.SendMessageStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.SendMessageStatus.displayName = 'proto.ro.tuc.chat.proto_gen.SendMessageStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ro.tuc.chat.proto_gen.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ro.tuc.chat.proto_gen.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ro.tuc.chat.proto_gen.Empty.displayName = 'proto.ro.tuc.chat.proto_gen.Empty';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.ChatMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.ChatMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromusername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tousername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatMessage}
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.ChatMessage;
  return proto.ro.tuc.chat.proto_gen.ChatMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.ChatMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatMessage}
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromusername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTousername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.ChatMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.ChatMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromusername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTousername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string fromUserName = 1;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.getFromusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatMessage} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.setFromusername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string toUserName = 2;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.getTousername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatMessage} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.setTousername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatMessage} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string timeStamp = 4;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatMessage} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.ChatUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestsendername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdateRequest}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.ChatUpdateRequest;
  return proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.ChatUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdateRequest}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestsendername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.ChatUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestsendername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string requestSenderName = 1;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.prototype.getRequestsendername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdateRequest} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatUpdateRequest.prototype.setRequestsendername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.MessageReadingStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    readerusername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    senderusername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    readmessagesuntil: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus}
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.MessageReadingStatus;
  return proto.ro.tuc.chat.proto_gen.MessageReadingStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus}
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReaderusername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderusername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReadmessagesuntil(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.MessageReadingStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReaderusername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSenderusername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReadmessagesuntil();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string readerUserName = 1;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.prototype.getReaderusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} returns this
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.prototype.setReaderusername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string senderUserName = 2;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.prototype.getSenderusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} returns this
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.prototype.setSenderusername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string readMessagesUntil = 3;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.prototype.getReadmessagesuntil = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} returns this
 */
proto.ro.tuc.chat.proto_gen.MessageReadingStatus.prototype.setReadmessagesuntil = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.MessageTypingStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    typerusername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recipientusername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    typing: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus}
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.MessageTypingStatus;
  return proto.ro.tuc.chat.proto_gen.MessageTypingStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus}
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTyperusername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientusername(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTyping(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.MessageTypingStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTyperusername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecipientusername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTyping();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string typerUserName = 1;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.prototype.getTyperusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} returns this
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.prototype.setTyperusername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string recipientUserName = 2;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.prototype.getRecipientusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} returns this
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.prototype.setRecipientusername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool typing = 3;
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.prototype.getTyping = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} returns this
 */
proto.ro.tuc.chat.proto_gen.MessageTypingStatus.prototype.setTyping = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.SessionClosedUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    partnername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.SessionClosedUpdate}
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.SessionClosedUpdate;
  return proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.SessionClosedUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.SessionClosedUpdate}
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartnername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.SessionClosedUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartnername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string partnerName = 1;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.prototype.getPartnername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.SessionClosedUpdate} returns this
 */
proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.prototype.setPartnername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.UpdateCase = {
  UPDATE_NOT_SET: 0,
  MESSAGE: 1,
  READINGSTATUS: 2,
  TYPINGSTATUS: 3,
  SESSIONCLOSEDUPDATE: 4
};

/**
 * @return {proto.ro.tuc.chat.proto_gen.ChatUpdate.UpdateCase}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.getUpdateCase = function() {
  return /** @type {proto.ro.tuc.chat.proto_gen.ChatUpdate.UpdateCase} */(jspb.Message.computeOneofCase(this, proto.ro.tuc.chat.proto_gen.ChatUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.ChatUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.ChatUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.ro.tuc.chat.proto_gen.ChatMessage.toObject(includeInstance, f),
    readingstatus: (f = msg.getReadingstatus()) && proto.ro.tuc.chat.proto_gen.MessageReadingStatus.toObject(includeInstance, f),
    typingstatus: (f = msg.getTypingstatus()) && proto.ro.tuc.chat.proto_gen.MessageTypingStatus.toObject(includeInstance, f),
    sessionclosedupdate: (f = msg.getSessionclosedupdate()) && proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.ChatUpdate;
  return proto.ro.tuc.chat.proto_gen.ChatUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.ChatUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ro.tuc.chat.proto_gen.ChatMessage;
      reader.readMessage(value,proto.ro.tuc.chat.proto_gen.ChatMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = new proto.ro.tuc.chat.proto_gen.MessageReadingStatus;
      reader.readMessage(value,proto.ro.tuc.chat.proto_gen.MessageReadingStatus.deserializeBinaryFromReader);
      msg.setReadingstatus(value);
      break;
    case 3:
      var value = new proto.ro.tuc.chat.proto_gen.MessageTypingStatus;
      reader.readMessage(value,proto.ro.tuc.chat.proto_gen.MessageTypingStatus.deserializeBinaryFromReader);
      msg.setTypingstatus(value);
      break;
    case 4:
      var value = new proto.ro.tuc.chat.proto_gen.SessionClosedUpdate;
      reader.readMessage(value,proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.deserializeBinaryFromReader);
      msg.setSessionclosedupdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.ChatUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.ChatUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ro.tuc.chat.proto_gen.ChatMessage.serializeBinaryToWriter
    );
  }
  f = message.getReadingstatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ro.tuc.chat.proto_gen.MessageReadingStatus.serializeBinaryToWriter
    );
  }
  f = message.getTypingstatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ro.tuc.chat.proto_gen.MessageTypingStatus.serializeBinaryToWriter
    );
  }
  f = message.getSessionclosedupdate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ro.tuc.chat.proto_gen.SessionClosedUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChatMessage message = 1;
 * @return {?proto.ro.tuc.chat.proto_gen.ChatMessage}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.getMessage = function() {
  return /** @type{?proto.ro.tuc.chat.proto_gen.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.ro.tuc.chat.proto_gen.ChatMessage, 1));
};


/**
 * @param {?proto.ro.tuc.chat.proto_gen.ChatMessage|undefined} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate} returns this
*/
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.setMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ro.tuc.chat.proto_gen.ChatUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageReadingStatus readingStatus = 2;
 * @return {?proto.ro.tuc.chat.proto_gen.MessageReadingStatus}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.getReadingstatus = function() {
  return /** @type{?proto.ro.tuc.chat.proto_gen.MessageReadingStatus} */ (
    jspb.Message.getWrapperField(this, proto.ro.tuc.chat.proto_gen.MessageReadingStatus, 2));
};


/**
 * @param {?proto.ro.tuc.chat.proto_gen.MessageReadingStatus|undefined} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate} returns this
*/
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.setReadingstatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ro.tuc.chat.proto_gen.ChatUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.clearReadingstatus = function() {
  return this.setReadingstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.hasReadingstatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional MessageTypingStatus typingStatus = 3;
 * @return {?proto.ro.tuc.chat.proto_gen.MessageTypingStatus}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.getTypingstatus = function() {
  return /** @type{?proto.ro.tuc.chat.proto_gen.MessageTypingStatus} */ (
    jspb.Message.getWrapperField(this, proto.ro.tuc.chat.proto_gen.MessageTypingStatus, 3));
};


/**
 * @param {?proto.ro.tuc.chat.proto_gen.MessageTypingStatus|undefined} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate} returns this
*/
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.setTypingstatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.ro.tuc.chat.proto_gen.ChatUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.clearTypingstatus = function() {
  return this.setTypingstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.hasTypingstatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SessionClosedUpdate sessionClosedUpdate = 4;
 * @return {?proto.ro.tuc.chat.proto_gen.SessionClosedUpdate}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.getSessionclosedupdate = function() {
  return /** @type{?proto.ro.tuc.chat.proto_gen.SessionClosedUpdate} */ (
    jspb.Message.getWrapperField(this, proto.ro.tuc.chat.proto_gen.SessionClosedUpdate, 4));
};


/**
 * @param {?proto.ro.tuc.chat.proto_gen.SessionClosedUpdate|undefined} value
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate} returns this
*/
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.setSessionclosedupdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.ro.tuc.chat.proto_gen.ChatUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ro.tuc.chat.proto_gen.ChatUpdate} returns this
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.clearSessionclosedupdate = function() {
  return this.setSessionclosedupdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.ChatUpdate.prototype.hasSessionclosedupdate = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.OpenSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromusername: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.OpenSessionRequest;
  return proto.ro.tuc.chat.proto_gen.OpenSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromusername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.OpenSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromusername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string fromUserName = 1;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest.prototype.getFromusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest} returns this
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequest.prototype.setFromusername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromusername: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accepted: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse;
  return proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromusername(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAccepted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromusername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccepted();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string fromUserName = 1;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.prototype.getFromusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse} returns this
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.prototype.setFromusername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool accepted = 2;
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.prototype.getAccepted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse} returns this
 */
proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.prototype.setAccepted = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
    successful: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    errormessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.Status}
 */
proto.ro.tuc.chat.proto_gen.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.Status;
  return proto.ro.tuc.chat.proto_gen.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.Status}
 */
proto.ro.tuc.chat.proto_gen.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccessful(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrormessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccessful();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getErrormessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool successful = 1;
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.Status.prototype.getSuccessful = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ro.tuc.chat.proto_gen.Status} returns this
 */
proto.ro.tuc.chat.proto_gen.Status.prototype.setSuccessful = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string errorMessage = 2;
 * @return {string}
 */
proto.ro.tuc.chat.proto_gen.Status.prototype.getErrormessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ro.tuc.chat.proto_gen.Status} returns this
 */
proto.ro.tuc.chat.proto_gen.Status.prototype.setErrormessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.ResultCase = {
  RESULT_NOT_SET: 0,
  STATUS: 1,
  SENTMESSAGE: 2
};

/**
 * @return {proto.ro.tuc.chat.proto_gen.SendMessageStatus.ResultCase}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.getResultCase = function() {
  return /** @type {proto.ro.tuc.chat.proto_gen.SendMessageStatus.ResultCase} */(jspb.Message.computeOneofCase(this, proto.ro.tuc.chat.proto_gen.SendMessageStatus.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.SendMessageStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.SendMessageStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && proto.ro.tuc.chat.proto_gen.Status.toObject(includeInstance, f),
    sentmessage: (f = msg.getSentmessage()) && proto.ro.tuc.chat.proto_gen.ChatMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.SendMessageStatus}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.SendMessageStatus;
  return proto.ro.tuc.chat.proto_gen.SendMessageStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.SendMessageStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.SendMessageStatus}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ro.tuc.chat.proto_gen.Status;
      reader.readMessage(value,proto.ro.tuc.chat.proto_gen.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.ro.tuc.chat.proto_gen.ChatMessage;
      reader.readMessage(value,proto.ro.tuc.chat.proto_gen.ChatMessage.deserializeBinaryFromReader);
      msg.setSentmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.SendMessageStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.SendMessageStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ro.tuc.chat.proto_gen.Status.serializeBinaryToWriter
    );
  }
  f = message.getSentmessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ro.tuc.chat.proto_gen.ChatMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional Status status = 1;
 * @return {?proto.ro.tuc.chat.proto_gen.Status}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.getStatus = function() {
  return /** @type{?proto.ro.tuc.chat.proto_gen.Status} */ (
    jspb.Message.getWrapperField(this, proto.ro.tuc.chat.proto_gen.Status, 1));
};


/**
 * @param {?proto.ro.tuc.chat.proto_gen.Status|undefined} value
 * @return {!proto.ro.tuc.chat.proto_gen.SendMessageStatus} returns this
*/
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.setStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ro.tuc.chat.proto_gen.SendMessageStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ro.tuc.chat.proto_gen.SendMessageStatus} returns this
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChatMessage sentMessage = 2;
 * @return {?proto.ro.tuc.chat.proto_gen.ChatMessage}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.getSentmessage = function() {
  return /** @type{?proto.ro.tuc.chat.proto_gen.ChatMessage} */ (
    jspb.Message.getWrapperField(this, proto.ro.tuc.chat.proto_gen.ChatMessage, 2));
};


/**
 * @param {?proto.ro.tuc.chat.proto_gen.ChatMessage|undefined} value
 * @return {!proto.ro.tuc.chat.proto_gen.SendMessageStatus} returns this
*/
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.setSentmessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.ro.tuc.chat.proto_gen.SendMessageStatus.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ro.tuc.chat.proto_gen.SendMessageStatus} returns this
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.clearSentmessage = function() {
  return this.setSentmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ro.tuc.chat.proto_gen.SendMessageStatus.prototype.hasSentmessage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ro.tuc.chat.proto_gen.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.ro.tuc.chat.proto_gen.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ro.tuc.chat.proto_gen.Empty}
 */
proto.ro.tuc.chat.proto_gen.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ro.tuc.chat.proto_gen.Empty;
  return proto.ro.tuc.chat.proto_gen.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ro.tuc.chat.proto_gen.Empty}
 */
proto.ro.tuc.chat.proto_gen.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ro.tuc.chat.proto_gen.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ro.tuc.chat.proto_gen.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ro.tuc.chat.proto_gen.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.ro.tuc.chat.proto_gen);
