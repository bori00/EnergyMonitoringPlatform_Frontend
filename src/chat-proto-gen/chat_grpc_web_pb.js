/**
 * @fileoverview gRPC-Web generated client stub for ro.tuc.chat.proto_gen
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.ro = {};
proto.ro.tuc = {};
proto.ro.tuc.chat = {};
proto.ro.tuc.chat.proto_gen = require('./chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.ChatMessage,
 *   !proto.ro.tuc.chat.proto_gen.SendMessageStatus>}
 */
const methodDescriptor_ChatService_sendMessage = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/sendMessage',
  grpc.web.MethodType.UNARY,
  proto.ro.tuc.chat.proto_gen.ChatMessage,
  proto.ro.tuc.chat.proto_gen.SendMessageStatus,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.ChatMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.SendMessageStatus.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.ChatMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ro.tuc.chat.proto_gen.SendMessageStatus)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.SendMessageStatus>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.sendMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/sendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMessage,
      callback);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.ChatMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ro.tuc.chat.proto_gen.SendMessageStatus>}
 *     Promise that resolves to the response
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.sendMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/sendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.ChatMessageRequest,
 *   !proto.ro.tuc.chat.proto_gen.ChatMessage>}
 */
const methodDescriptor_ChatService_receiveMessage = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/receiveMessage',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.ro.tuc.chat.proto_gen.ChatMessageRequest,
  proto.ro.tuc.chat.proto_gen.ChatMessage,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.ChatMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.ChatMessage.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.ChatMessageRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.ChatMessage>}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.receiveMessage =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/receiveMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveMessage);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.ChatMessageRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.ChatMessage>}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.receiveMessage =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/receiveMessage',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.OpenSessionRequest,
 *   !proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse>}
 */
const methodDescriptor_ChatService_sendOpenSessionRequest = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/sendOpenSessionRequest',
  grpc.web.MethodType.UNARY,
  proto.ro.tuc.chat.proto_gen.OpenSessionRequest,
  proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.sendOpenSessionRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/sendOpenSessionRequest',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendOpenSessionRequest,
      callback);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse>}
 *     Promise that resolves to the response
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.sendOpenSessionRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/sendOpenSessionRequest',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendOpenSessionRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.Empty,
 *   !proto.ro.tuc.chat.proto_gen.OpenSessionRequest>}
 */
const methodDescriptor_ChatService_receiveOpenSessionRequest = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/receiveOpenSessionRequest',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.ro.tuc.chat.proto_gen.Empty,
  proto.ro.tuc.chat.proto_gen.OpenSessionRequest,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.OpenSessionRequest.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.OpenSessionRequest>}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.receiveOpenSessionRequest =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/receiveOpenSessionRequest',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveOpenSessionRequest);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.OpenSessionRequest>}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.receiveOpenSessionRequest =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/receiveOpenSessionRequest',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveOpenSessionRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse,
 *   !proto.ro.tuc.chat.proto_gen.Status>}
 */
const methodDescriptor_ChatService_acceptOpenSessionRequest = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/acceptOpenSessionRequest',
  grpc.web.MethodType.UNARY,
  proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse,
  proto.ro.tuc.chat.proto_gen.Status,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.Status.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ro.tuc.chat.proto_gen.Status)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.Status>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.acceptOpenSessionRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/acceptOpenSessionRequest',
      request,
      metadata || {},
      methodDescriptor_ChatService_acceptOpenSessionRequest,
      callback);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.OpenSessionRequestResponse} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ro.tuc.chat.proto_gen.Status>}
 *     Promise that resolves to the response
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.acceptOpenSessionRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/acceptOpenSessionRequest',
      request,
      metadata || {},
      methodDescriptor_ChatService_acceptOpenSessionRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.MessageReadingStatus,
 *   !proto.ro.tuc.chat.proto_gen.Status>}
 */
const methodDescriptor_ChatService_sendMessageReadingStatusUpdate = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/sendMessageReadingStatusUpdate',
  grpc.web.MethodType.UNARY,
  proto.ro.tuc.chat.proto_gen.MessageReadingStatus,
  proto.ro.tuc.chat.proto_gen.Status,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.Status.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ro.tuc.chat.proto_gen.Status)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.Status>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.sendMessageReadingStatusUpdate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/sendMessageReadingStatusUpdate',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMessageReadingStatusUpdate,
      callback);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.MessageReadingStatus} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ro.tuc.chat.proto_gen.Status>}
 *     Promise that resolves to the response
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.sendMessageReadingStatusUpdate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/sendMessageReadingStatusUpdate',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMessageReadingStatusUpdate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.Empty,
 *   !proto.ro.tuc.chat.proto_gen.MessageReadingStatus>}
 */
const methodDescriptor_ChatService_receiveMessageReadingStatusUpdates = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/receiveMessageReadingStatusUpdates',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.ro.tuc.chat.proto_gen.Empty,
  proto.ro.tuc.chat.proto_gen.MessageReadingStatus,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.MessageReadingStatus.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.MessageReadingStatus>}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.receiveMessageReadingStatusUpdates =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/receiveMessageReadingStatusUpdates',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveMessageReadingStatusUpdates);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.MessageReadingStatus>}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.receiveMessageReadingStatusUpdates =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/receiveMessageReadingStatusUpdates',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveMessageReadingStatusUpdates);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.MessageTypingStatus,
 *   !proto.ro.tuc.chat.proto_gen.Status>}
 */
const methodDescriptor_ChatService_sendMessageTypingStatusUpdate = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/sendMessageTypingStatusUpdate',
  grpc.web.MethodType.UNARY,
  proto.ro.tuc.chat.proto_gen.MessageTypingStatus,
  proto.ro.tuc.chat.proto_gen.Status,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.Status.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ro.tuc.chat.proto_gen.Status)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.Status>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.sendMessageTypingStatusUpdate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/sendMessageTypingStatusUpdate',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMessageTypingStatusUpdate,
      callback);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.MessageTypingStatus} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ro.tuc.chat.proto_gen.Status>}
 *     Promise that resolves to the response
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.sendMessageTypingStatusUpdate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/sendMessageTypingStatusUpdate',
      request,
      metadata || {},
      methodDescriptor_ChatService_sendMessageTypingStatusUpdate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ro.tuc.chat.proto_gen.Empty,
 *   !proto.ro.tuc.chat.proto_gen.MessageTypingStatus>}
 */
const methodDescriptor_ChatService_receiveMessageTypingStatusUpdate = new grpc.web.MethodDescriptor(
  '/ro.tuc.chat.proto_gen.ChatService/receiveMessageTypingStatusUpdate',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.ro.tuc.chat.proto_gen.Empty,
  proto.ro.tuc.chat.proto_gen.MessageTypingStatus,
  /**
   * @param {!proto.ro.tuc.chat.proto_gen.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ro.tuc.chat.proto_gen.MessageTypingStatus.deserializeBinary
);


/**
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.MessageTypingStatus>}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServiceClient.prototype.receiveMessageTypingStatusUpdate =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/receiveMessageTypingStatusUpdate',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveMessageTypingStatusUpdate);
};


/**
 * @param {!proto.ro.tuc.chat.proto_gen.Empty} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ro.tuc.chat.proto_gen.MessageTypingStatus>}
 *     The XHR Node Readable Stream
 */
proto.ro.tuc.chat.proto_gen.ChatServicePromiseClient.prototype.receiveMessageTypingStatusUpdate =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ro.tuc.chat.proto_gen.ChatService/receiveMessageTypingStatusUpdate',
      request,
      metadata || {},
      methodDescriptor_ChatService_receiveMessageTypingStatusUpdate);
};


module.exports = proto.ro.tuc.chat.proto_gen;

